// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type ExtraInfo struct {
	RemindTime *time.Time `json:"remindTime"`
}

type InputExtraInfo struct {
	RemindTime string `json:"remindTime"`
}

type InputTodo struct {
	Text     string          `json:"text"`
	UserName string          `json:"userName"`
	Done     *bool           `json:"done"`
	Extra    *InputExtraInfo `json:"extra"`
}

type InputUser struct {
	Name   string   `json:"name"`
	Height *float64 `json:"height"`
	Hobby  []string `json:"hobby"`
	Age    int      `json:"age"`
	Gender *Gender  `json:"gender"`
}

type Todo struct {
	ID    string     `json:"id"`
	Text  string     `json:"text"`
	Done  bool       `json:"done"`
	User  *User      `json:"user"`
	Extra *ExtraInfo `json:"extra"`
}

type User struct {
	ID      int      `json:"id"`
	Name    string   `json:"name"`
	Height  *float64 `json:"height"`
	Hobby   []string `json:"hobby"`
	Age     int      `json:"age"`
	Gender  *Gender  `json:"gender"`
	Friends []*User  `json:"friends"`
}

type Gender string

const (
	GenderUnknown Gender = "UNKNOWN"
	GenderFemale  Gender = "FEMALE"
	GenderMale    Gender = "MALE"
)

var AllGender = []Gender{
	GenderUnknown,
	GenderFemale,
	GenderMale,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderUnknown, GenderFemale, GenderMale:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
